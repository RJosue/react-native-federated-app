# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Pipeline ðŸš€

on:
  push:
    branches: ["master"]

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: "Checkout Directory"
        uses: actions/checkout@v3
        
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
          
      - name: Cache Dependencies
        id: cache_dependencies
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          path: ~/.yarn/cache
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Create .yarnrc.yaml
        run: |
          echo "npmAlwaysAuth: true" >> ~/.yarnrc.yml
          echo "npmRegistryServer: ${{ secrets.NPM_REGISTRY_SERVER }}" >> ~/.yarnrc.yml
          echo "npmAuthIdent: ${{ secrets.NPM_AUTH_IDENT }}" >> ~/.yarnrc.yml
          
      - name: Install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: yarn install

  build-android:
    needs: install-dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: "Checkout Directory"
        uses: actions/checkout@v3
        
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
          
      - name: Cache build Android
        uses: actions/cache@v2
        id: node_modules_cache
        with:
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          path: ~/.yarn/cache
      - name: Install dependencies
        run: yarn install
        
      - name: Build Apps
        continue-on-error: true
        run: yarn build:android
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-build
          path: |
            app1/build/android/
            app2/build/android/

  # build-ios:
  #   needs: install-dependencies
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       node-version: [14.x]
  #   steps:
  #     - name: "Checkout Directory"
  #       uses: actions/checkout@v3
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         cache: "yarn"
  #     - name: Cache build iOS
  #       uses: actions/cache@v2
  #       id: node_modules_cache
  #       with:
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}1
  #         path: ~/.yarn/cache
  #     - name: Install dependencies
  #       run: yarn install
  #     - name: Build Apps
  #       continue-on-error: true
  #       run: yarn build:ios

  deploy:
    needs: [build-android]
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Directory"
        uses: actions/checkout@v3
        
      - name: Create builds folders
        run: |
          mkdir -p artifacts
          mkdir -p build/app1
          mkdir -p build/app2
          
      - name: Download Android artifacts
        uses: actions/download-artifact@v3
        with: 
          name: android-build
          path: artifacts

      - name: "Artifacts list"
        run: |
          cd artifacts
          ls -R

      - name: 'Move Builds'
        run: |
          mv artifacts/app1/build/android build/app1/android
          mv artifacts/app2/build/android build/app2/android
          mv artifacts/app1/build/ios build/app1/ios
          mv artifacts/app2/build/ios build/app2/ios
          cd build
          ls -R

      - name: "Configure AWS Credentials"
        uses: "aws-actions/configure-aws-credentials@v1"
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: "Send builds to S3 Bucket"
        run: |
          aws s3 cp build/ s3://${{ secrets.AWS_S3_BUCKET }}/ --recursive
